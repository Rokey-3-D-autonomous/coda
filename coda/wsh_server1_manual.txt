@@@@@@@@@@
서버 = 제어
1. 시나리오 순서로 관리
0 순찰 -> 1 교통안내 + 촬영 출발 -> 2 사건 종료


순찰 = 순서대로 네비게이션 위치 퍼블리시
교통안내 = 
yolo depth rviz에서 서브스크라이브로 물체인식 확인 후 실행
순찰 중지 및 각 터틀봇 명령
사건 종료 = 사진 서브스크라이브 후 각 터틀봇 원래 상태로 복귀


터틀봇1
순찰 -> done
사건감지 -> yolo depth 사용, 퍼블리셔 추가 필요
교통안내 -> 완료

터틀봇2
이동(=순찰) -> done
촬영 -> 기본 기능

서버 = 제어
=============================
네비게이션 노드
- pub
    Int32, "/robot1/goal_result"

- sub
    Int32, "/robot1/move_position"
    Int32, "/robot1/move_pose"

YOLO DEPTH RVIZ 노드
- pub
    Int32, "/accident_detected"
    ?, "/accident_detected_tf" : 좌표 받아와서, 서버에서 Pose로 변환해서 Nav0에 쏴줄 데이터
- sub
    Image, RGB_TOPIC
    Image, DEPTH_TOPIC
    CameraInfo, CAMERA_INFO_TOPIC    
- timer
    YOLO 인식

UI/알람 노드
- pub
    AudioNoteVector, "/robot1/cmd_audio" -> 서버에서 사용 안함
- sub
    Int32, "/robot1/dispatch_command"

PCD 보고서 노드
- pub
- sub
    I32, "/accident_detected"


=====================================================================
서버파트 
- YOLO DEPTH RVIZ 노드
- PCD 보고서 노드
- **서버 제어 노드**


터틀봇 0 파트
- 네비게이션 노드


터틀봇 1 파트
- 네비게이션 노드
- UI/알람 노드
